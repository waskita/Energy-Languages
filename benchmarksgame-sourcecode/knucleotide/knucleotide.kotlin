/* The Computer Language Benchmarks Game
   https://salsa.debian.org/benchmarksgame-team/benchmarksgame/

 Based on Java version #6 by James McIlree
 Contributed by Hank Grabowski
 */

import java.util.*
import java.io.*
import java.util.concurrent.*

object knucleotide {
    internal fun createFragmentTasks(sequence: ByteArray, fragmentLengths: IntArray): ArrayList<Callable<MutableMap<ByteString, ByteString>>> {
        val tasks = ArrayList<Callable<MutableMap<ByteString, ByteString>>>()
        for (fragmentLength in fragmentLengths) {
            for (index in 0..fragmentLength - 1) {
                tasks.add(Callable { createFragmentMap(sequence, index, fragmentLength) })
            }
        }
        return tasks
    }

    internal fun createFragmentMap(sequence: ByteArray, offset: Int, fragmentLength: Int): MutableMap<ByteString, ByteString> {
        val map = HashMap<ByteString, ByteString>()
        val lastIndex = sequence.size - fragmentLength + 1
        var key = ByteString(fragmentLength)
        var index = offset
        while (index < lastIndex) {
            key.calculateHash(sequence, index)
            val fragment = map[key]
            if (fragment != null) {
                fragment.count++
            } else {
                map.put(key, key)
                key = ByteString(fragmentLength)
            }
            index += fragmentLength
        }

        return map
    }

    // Destructive!
    internal fun sumTwoMaps(map1: MutableMap<ByteString, ByteString>, map2: Map<ByteString, ByteString>): Map<ByteString, ByteString> {
        for ((key, value) in map2) {
            val sum = map1[key]
            if (sum != null)
                sum.count += value.count
            else
                map1.put(key, value)
        }
        return map1
    }

    internal fun writeFrequencies(totalCount: Float, frequencies: Map<ByteString, ByteString>): String {
        val list = TreeSet(frequencies.values)
        val sb = StringBuilder()
        for (k in list)
            sb.append(String.format("%s %.3f\n", k.toString().toUpperCase(), k.count.toFloat() * 100.0f / totalCount))

        return sb.append('\n').toString()
    }

    @Throws(Exception::class)
    internal fun writeCount(futures: MutableList<Future<MutableMap<ByteString, ByteString>>>, nucleotideFragment: String): String {
        val key = ByteString(nucleotideFragment.length)
        key.calculateHash(nucleotideFragment.toByteArray(), 0)

        var count = 0
        for (future in futures) {
            val temp = future.get()[key]
            if (temp != null) count += temp.count
        }

        return count.toString() + "\t" + nucleotideFragment.toUpperCase() + '\n'
    }

    @Throws(Exception::class)
    @JvmStatic
    fun main(args: Array<String>) {
        var line: String = ""
        val `in` = BufferedReader(InputStreamReader(System.`in`))
        while ({line = `in`.readLine(); line}() != null) {
            if (line.startsWith(">THREE")) break
        }

        val baos = ByteArrayOutputStream()
        var bytes = ByteArray(100)
        while ({line = `in`.readLine()}() != null) {
            if (line.length > bytes.size)
                bytes = ByteArray(line.length)

            var i: Int
            i = 0
            while (i < line.length) {
                bytes[i] = line[i].toByte()
                i++
            }
            baos.write(bytes, 0, i)
        }

        val sequence = baos.toByteArray()

        val pool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors())
        val fragmentLengths = intArrayOf(1, 2, 3, 4, 6, 12, 18)
        val futures = pool.invokeAll(createFragmentTasks(sequence, fragmentLengths))
        pool.shutdown()

        val sb = StringBuilder()

        sb.append(writeFrequencies(sequence.size.toFloat(), futures[0].get()))
        sb.append(writeFrequencies((sequence.size - 1).toFloat(), sumTwoMaps(futures[1].get(), futures[2].get())))

        val nucleotideFragments = arrayOf("ggt", "ggta", "ggtatt", "ggtattttaatt", "ggtattttaatttatagt")
        for (nucleotideFragment in nucleotideFragments) {
            sb.append(writeCount(futures, nucleotideFragment))
        }

        print(sb.toString())
    }

    internal class ByteString(size: Int) : Comparable<ByteString> {
        var hash: Int = 0
        var count = 1
        val bytes: ByteArray

        init {
            bytes = ByteArray(size)
        }

        fun calculateHash(k: ByteArray, offset: Int) {
            var temp = 0
            for (i in bytes.indices) {
                val b = k[offset + i]
                bytes[i] = b
                temp = temp * 31 + b
            }
            hash = temp
        }

        override fun hashCode(): Int {
            return hash
        }

        override fun equals(obj: Any?): Boolean {
            return Arrays.equals(bytes, (obj as ByteString).bytes)
        }

        override fun compareTo(other: ByteString): Int {
            return other.count - count
        }

        override fun toString(): String {
            return String(bytes)
        }
    }
}
